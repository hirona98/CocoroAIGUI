CocoroAI WebSocket API 仕様書
===========================================

【目次】
1. 概要
2. 接続情報
3. メッセージフォーマット
   3.1 共通フィールド
   3.2 チャットメッセージ
   3.3 設定変更メッセージ
   3.4 制御メッセージ
   3.5 状態通知メッセージ
4. 通信フロー例
5. セッションIDの定義と使い方
6. ユーザIDの定義と使い方
7. エラーハンドリング
8. その他の注意事項

------------------------------------------------------------

1. 概要
---------
本仕様書は、Unity側の CocoroAI アプリケーションが提供する WebSocket サーバを通して、外部アプリ（例：ExternalChatController）と通信するためのAPI仕様を定義します。UnityはWebSocketサーバとして動作し、外部アプリはクライアントとして接続してください。

2. 接続情報
-----------
- URL例: ws://<Unity実行マシンのIP>:8080/
- プロトコル: WebSocket
- 接続タイムアウトや再接続ロジックは、各クライアント実装に依存します。

3. メッセージフォーマット
--------------------------
すべてのメッセージは JSON 形式で送受信され、以下の共通フィールドおよび各タイプの詳細なペイロードが定義されます。

3.1 共通フィールド
--------------------
{
  "type": "<メッセージタイプ>",   // "chat", "config", "control", "status" など
  "timestamp": "<ISO8601形式のタイムスタンプ>",
  "payload": { ... }                    // タイプごとの詳細な内容
}

3.2 チャットメッセージ
----------------------
【リクエスト例】
{
  "type": "chat",
  "timestamp": "2025-03-29T14:35:00+09:00",
  "payload": {
      "userId": "user01",
      "sessionId": "session123",
      "message": "こんにちは"
  }
}

【レスポンス例】
{
  "type": "chat",
  "timestamp": "2025-03-29T14:35:01+09:00",
  "payload": {
      "response": "Received: こんにちは"
  }
}

3.3 設定変更メッセージ
------------------------
【設定更新リクエスト例】
{
  "type": "config",
  "timestamp": "2025-03-29T14:36:00+09:00",
  "payload": {
      "action": "update",
      "settingKey": "inputSensitivity",
      "value": "high"
  }
}

【設定更新レスポンス例】
{
  "type": "config",
  "timestamp": "2025-03-29T14:36:01+09:00",
  "payload": {
      "status": "ok",
      "message": "設定を更新しました。"
  }
}

【設定取得リクエスト例】
{
  "type": "config",
  "timestamp": "2025-03-29T14:36:00+09:00",
  "payload": {
      "action": "get"
  }
}

【設定取得レスポンス例】
{
  "type": "config",
  "timestamp": "2025-03-29T14:36:01+09:00",
  "payload": {
      "status": "ok",
      "settings": {
          "volume": 0.8,
          "speed": 1.0,
          "pitch": 1.0,
          "voiceType": "normal",
          "language": "ja-JP",
          "autoResponse": true,
          "logLevel": "info"
      }
  }
}

3.4 制御メッセージ
---------------------
外部アプリがUnityの起動／終了などの制御指示を送る場合に用います。

【リクエスト例】
{
  "type": "control",
  "timestamp": "2025-03-29T14:37:00+09:00",
  "payload": {
      "command": "shutdown",    // "shutdown" または "restart"
      "reason": "高CPU使用率"
  }
}

【レスポンス例】
{
  "type": "control",
  "timestamp": "2025-03-29T14:37:01+09:00",
  "payload": {
      "status": "executed",
      "message": "Shutdown command received."
  }
}

3.5 状態通知メッセージ
------------------------
Unityから外部クライアントへ、アプリケーションの現在の状態を通知する際に用います。

【通知例】
{
  "type": "status",
  "timestamp": "2025-03-29T14:38:00+09:00",
  "payload": {
      "currentCPU": 35,
      "status": "running"
  }
}

4. 通信フロー例
----------------
1. 外部アプリはWebSocketサーバ (例: ws://192.168.x.y:8080/) に接続し、ハンドシェイクを完了します。
2. ユーザーが外部アプリのUIからチャットメッセージを送信すると、クライアントは上記「チャットメッセージ」の形式に沿ってJSONを送信します。
3. Unity側の WebSocket サーバ (DialogWebSocketProcessor) がメッセージを受信し、処理後にレスポンスとして応答を返送します。
4. 状況に応じ、Unityは状態通知や設定変更の確認メッセージを送信できます。

5. セッションIDの定義と使い方
-----------------------------
- セッションID (sessionId) は、各チャットセッションを一意に識別するための文字列です。
- 外部アプリは、チャット開始時に一意なセッションIDを生成し、以降そのセッションに関する全てのメッセージに付与してください。
- Unity側は、この sessionId を用いて、特定の会話コンテキストおよび状態管理を行い、適切な応答や設定変更を実施します。

6. ユーザIDの定義と使い方
-----------------------------
- ユーザID (userId) は、各ユーザーを一意に識別するための文字列です。
- 外部アプリは、アプリ起動またはログイン時に一意なユーザIDを取得または生成し、各チャットメッセージに必ず付与してください。
- Unity側は、userId を用いてユーザー固有の会話履歴や設定の管理、パーソナライズされた応答の提供に活用します。

7. エラーハンドリング
---------------------
- クライアントは、無効なJSON形式や不正なメッセージに対して、適切なエラー処理を実装してください。
- Unity側は、メッセージ解析に失敗した場合、エラーメッセージを返すか、ログに記録するようにしてください。

8. その他の注意事項
-----------------------
- 全てのタイムスタンプは ISO 8601 形式 (例: "2025-03-29T14:35:00+09:00") を使用してください。
- 接続の安定性、再接続ロジック、及びセキュリティ対策（認証や暗号化）の実装は、各実装者で検討してください。
- API仕様の拡張が必要な場合は、本仕様書を随時更新してください。

===========================================
以上が、外部プロジェクトの実装者に提供する CocoroAI の WebSocket API 仕様です。
